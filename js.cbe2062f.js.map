{"version":3,"sources":["js/models/Particula.js","../src/index.ts","js/controllers/QuadroParticulasController.js","js/index.js"],"names":["Particula","context","drawContext","drawContextWidthLimit","canvas","clientWidth","drawContextHeightLimit","clientHeight","radius","vPosition","x","Math","random","y","speed","directionAngle","floor","vSpeed","cos","sin","beginPath","arc","PI","closePath","fillStyle","fill","update","checkBoudaries","particula","outrasParticulas","contexto","distMin","p","distancia","hypot","opacity","linetWidth","strokeStyle","moveTo","lineTo","stroke","QuadroParticulasController","elCanvas","document","querySelector","elQaudro","width","height","ctx","getContext","particulas","i","push","particles","Particle","strColor","render","requestAnimationFrame","bind","clearRect","forEach","draw","linkParticulas","fillRect","quadroParticulasController"],"mappings":"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","file":"js.cbe2062f.js","sourceRoot":"../src","sourcesContent":["export default class Particula {\n\n    constructor(context) {\n        this.drawContext = context;\n        this.drawContextWidthLimit = this.drawContext.canvas.clientWidth;\n        this.drawContextHeightLimit = this.drawContext.canvas.clientHeight;\n\n        this.radius = 7;\n        this.vPosition = {\n            x: Math.random() * this.drawContextWidthLimit,\n            y: Math.random() * this.drawContextHeightLimit\n        };        \n        this.speed = 1.5;\n        this.directionAngle = Math.floor(Math.random() * 360);\n        this.vSpeed = {\n            x: (Math.cos(this.directionAngle) * this.speed),\n            y: (Math.sin(this.directionAngle) * this.speed)\n        }\n    }\n\n    draw() {\n        this.drawContext.beginPath();\n        this.drawContext.arc( this.vPosition.x, this.vPosition.y, this.radius, 0, Math.PI*2);\n        this.drawContext.closePath();\n        this.drawContext.fillStyle = '#FFF';\n        this.drawContext.fill();\n\n        this.update();\n    }\n\n    update() {\n        this.checkBoudaries();\n        this.vPosition.x += this.vSpeed.x; \n        this.vPosition.y += this.vSpeed.y; \n    }\n\n    checkBoudaries() {\n        if ( this.vPosition.x < 0 || this.vPosition.x > this.drawContextWidthLimit ) {\n            this.vSpeed.x *= -1;\n        }\n\n        if ( this.vPosition.y < 0 || this.vPosition.y > this.drawContextHeightLimit ) {\n            this.vSpeed.y *= -1;\n        }\n    }\n\n    static linkParticulas(particula,  outrasParticulas, contexto) {\n        this.distMin = 100;\n        for (const p of outrasParticulas) {\n            const distancia = Math.hypot( (p.vPosition.x - particula.vPosition.x) , (p.vPosition.y - particula.vPosition.y) );\n            if (distancia< this.distMin)\n            {\n                const opacity = 1 - distancia/this.distMin;\n                contexto.linetWidth = 1;\n                contexto.strokeStyle = `rgba(255,255,255,${opacity})`;\n                contexto.beginPath();\n                contexto.moveTo(particula.vPosition.x, particula.vPosition.y);\n                contexto.lineTo(p.vPosition.x, p.vPosition.y);\n                contexto.stroke();\n            }\n        }\n    }\n}","export default class Particle {\n\n    private ctx : CanvasRenderingContext2D;\n    public drawCtxWidthLimit : number;\n    public drawCtxHeightLimit : number;\n    public vPosition : any;    \n    public directionAngle : number = Math.floor(Math.random() * 360);\n    public vSpeed : any;    \n    public strColor: string;\n    public radius : number;\n    public absSpeed : number;\n\n    constructor(context : CanvasRenderingContext2D) {\n        this.ctx = context;\n\n        //const\n        this.absSpeed = 1;\n        this.radius = 1;\n        this.strColor = '#FFF';\n\n\n        this.drawCtxWidthLimit = this.ctx.canvas.clientWidth;\n        this.drawCtxHeightLimit = this.ctx.canvas.clientHeight;\n        \n        this.vPosition = {\n            x: Math.random() * this.drawCtxWidthLimit,\n            y: Math.random() * this.drawCtxHeightLimit\n        };\n\n        this.vSpeed = {\n            x: (Math.cos(this.directionAngle) * this.absSpeed),\n            y: (Math.sin(this.directionAngle) * this.absSpeed)\n        }        \n    }\n\n    draw() {\n        this.ctx.beginPath();\n        this.ctx.arc( this.vPosition.x, this.vPosition.y, this.radius, 0, Math.PI*2);\n        this.ctx.closePath();\n        this.ctx.fillStyle = this.strColor;\n        this.ctx.fill();\n\n        this.update();\n    }\n\n    update() {\n        this.checkBoudaries();\n        this.vPosition.x += this.vSpeed.x; \n        this.vPosition.y += this.vSpeed.y; \n    }\n\n    checkBoudaries() {\n        if ( this.vPosition.x < 0 || this.vPosition.x > this.drawCtxWidthLimit ) {\n            this.vSpeed.x *= -1;\n        }\n\n        if ( this.vPosition.y < 0 || this.vPosition.y > this.drawCtxHeightLimit ) {\n            this.vSpeed.y *= -1;\n        }\n    }\n\n    static linkParticles(particle: Particle , othersParticle  : Array<Particle> , contexto: CanvasRenderingContext2D) {\n        const distMin = 100;\n        for (const p of othersParticle) {\n            const distancia = Math.hypot( (p.vPosition.x - particle.vPosition.x) , (p.vPosition.y - particle.vPosition.y) );\n            if (distancia< distMin)\n            {\n                const opacity = 1 - distancia/distMin;\n                contexto.lineWidth = 1;\n                contexto.strokeStyle = `rgba(255,255,255,${opacity})`;\n                contexto.beginPath();\n                contexto.moveTo(particle.vPosition.x, particle.vPosition.y);\n                contexto.lineTo(p.vPosition.x, p.vPosition.y);\n                contexto.stroke();\n            }\n        }\n    }\n\n}","import Particula from '../models/Particula'\nimport Particle from 'particle-canvas-gustavorizzo'\n\nexport default class QuadroParticulasController{\n\n    constructor() {\n\n        // conect to DOM\n        const elCanvas = document.querySelector('#canvas');\n        const elQaudro = document.querySelector('#quadroPacticulas');\n    \n        // Faz com que o canvas ocupe o mesmo tamanho do quadro\n        elCanvas.width = elQaudro.clientWidth;\n        elCanvas.height = elQaudro.clientHeight;\n    \n        // Dando contexto ao cnavas\n        this.ctx = elCanvas.getContext('2d');\n    \n        this.particulas = [];\n\n        for (var i=0; i<10; i++){\n            this.particulas.push( new Particula(this.ctx) );\n        }  \n\n        // teste biblioteca\n        this.particles = [];\n        for (var i=0; i<20; i++){\n            let p = new Particle(this.ctx)\n            p.radius = 4;\n            p.strColor = '#0FF';\n            this.particles.push( p );\n        } \n\n        this.x = 0;\n        this.render();\n    }\n\n    render(){\n        \n        // Criando o looping de renderização\n        requestAnimationFrame(this.render.bind(this));\n        this.ctx.clearRect(0, 0, this.ctx.canvas.clientWidth , this.ctx.canvas.clientHeight);\n\n        this.particulas.forEach (particula => {\n            particula.draw(this.ctx);\n            Particula.linkParticulas(particula, this.particulas, this.ctx);        \n        });\n\n        // Testando Biblioteca Particle\n        this.particles.forEach (p => {\n            p.draw();\n            //Particle.linkParticles(p, this.particles , this.ctx);\n        });\n\n        // Desenhando quadrado teste\n        this.ctx.fillStyle = '#0FF';\n        this.ctx.fillRect(this.x, 0, 100, 100);\n        // animando\n        this.x++;        \n    }\n}\n","import QuadroParticulasController from './controllers/QuadroParticulasController'\n\nlet quadroParticulasController = new QuadroParticulasController();\n\n"]}